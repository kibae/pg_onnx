name: CMake on MacOS

on:
  workflow_run:
    workflows:
      - Prepare Asset
    types:
      - completed

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ macos-latest ]
        build_type: [ Debug ]
        c_compiler: [ clang ]
        include:
          - c_compiler: clang
            cpp_compiler: clang++

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: false
          submodules: true
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0

      - name: Prepare container(homebrew)
        shell: bash
        run: |
          brew update
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake boost postgresql googletest onnxruntime

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: |
          sudo cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target install --parallel 4

      - name: Cache test fixtures
        id: cache-test-fixtures
        uses: actions/cache@v4
        with:
          path: onnxruntime-server/test/fixture
          key: test-fixtures-v1

      - name: Download assets(models)
        if: steps.cache-test-fixtures.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ./onnxruntime-server/test/fixture/download-test-fixtures.sh

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          PG_LIBDIR=$(pg_config --libdir)
          ONNXRUNTIME_LIB=$(ls -S /usr/local/onnxruntime/lib | head -n 1)
          install_name_tool -change @rpath/${ONNXRUNTIME_LIB} /usr/local/onnxruntime/lib/${ONNXRUNTIME_LIB} ${PG_LIBDIR}/pg_onnx.so
          ctest --extra-verbose --build-config ${{ matrix.build_type }}

      - name: Upload artifact
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: output-artifact
          path: ${{ steps.strings.outputs.build-output-dir }}/pg_onnx/regression.*
          if-no-files-found: ignore
