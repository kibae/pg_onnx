name: CMake on Ubuntu 22.04, PostgreSQL 14

on:
  workflow_run:
    workflows:
      - Prepare Linux
    types:
      - completed

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04 ]
        pg: [ pgsql14 ]
        c_compiler: [ gcc, clang ]
        build_type: [ Debug ]
        include:
          - pg: pgsql14
            pg_server_dev_pkg: postgresql-server-dev-14
          - c_compiler: gcc
            cpp_compiler: g++
          - c_compiler: clang
            cpp_compiler: clang++

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: false
          submodules: true

      - name: Cache dependencies(apt)
        id: cache-dependencies-apt
        uses: actions/cache@v4
        with:
          path: .github/cache/dependencies-apt
          key: ${{ matrix.os }}-dependencies-apt-v1

      - name: Prepare container(apt download)
        shell: bash
        if: steps.cache-dependencies-apt.outputs.cache-hit != 'true' && (startsWith(matrix.os, 'debian-') || startsWith(matrix.os, 'ubuntu-'))
        run: |
          sudo apt-get update -qq
          sudo apt-get install -yqf --download-only build-essential clang cmake libboost-all-dev libpq-dev libgtest-dev ${{ matrix.pg_server_dev_pkg }}
          cp /var/cache/apt/archives/*.deb .github/cache/dependencies-apt/

      - name: Prepare container(apt)
        shell: bash
        if: startsWith(matrix.os, 'debian-') || startsWith(matrix.os, 'ubuntu-')
        run: |
          cat /etc/os-release
          sudo dpkg -i .github/cache/dependencies-apt/*.deb

      - name: Prepare container(onnxruntime)
        shell: bash
        run: |
          ./onnxruntime-server/.github/actions/download-onnxruntime-linux.sh

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: |
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel 4
          sudo cmake --install ${{ steps.strings.outputs.build-output-dir }}/pg_onnx

      - name: Cache test fixtures
        id: cache-test-fixtures
        uses: actions/cache@v4
        with:
          path: onnxruntime-server/test/fixture
          key: test-fixtures-v1

      - name: Download assets(models)
        if: steps.cache-test-fixtures.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ./onnxruntime-server/test/fixture/download-test-fixtures.sh

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --extra-verbose --build-config ${{ matrix.build_type }}

      - name: Upload artifact
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: output-artifact
          path: ${{ steps.strings.outputs.build-output-dir }}/pg_onnx/regression.*
          if-no-files-found: ignore
